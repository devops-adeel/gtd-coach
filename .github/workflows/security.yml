name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better scanning

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  python-security:
    name: Python Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit
        run: |
          bandit -r gtd_coach/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            echo "## Bandit Security Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('bandit-report.json') as f:
    data = json.load(f)
    print(f\"**Issues found:** {len(data.get('results', []))}\")
    for issue in data.get('results', [])[:10]:  # Show top 10
        print(f\"- {issue['issue_text']} in {issue['filename']}:{issue['line_number']}\")
            " >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          if [ -f safety-report.json ]; then
            echo "## Safety Vulnerability Report" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('safety-report.json') as f:
    data = json.load(f)
    vulns = data.get('vulnerabilities', [])
    print(f\"**Vulnerabilities found:** {len(vulns)}\")
    for vuln in vulns[:10]:  # Show top 10
        print(f\"- {vuln['package_name']}: {vuln['advisory']}\")
            " >> $GITHUB_STEP_SUMMARY
          fi

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Dependabot security updates check
        uses: dependabot/fetch-metadata@v2
        if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  pre-commit-check:
    name: Pre-commit Security Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

  api-key-patterns:
    name: Custom API Key Pattern Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for hardcoded Timing API keys
        run: |
          if grep -r "TIMING_API_KEY\s*=\s*[\"']eyJ" --include="*.py" --include="*.yml" --include="*.yaml" --include="*.json" --exclude-dir=.git .; then
            echo "::error::Found hardcoded Timing API key!"
            exit 1
          fi

      - name: Check for hardcoded Todoist API keys
        run: |
          if grep -r "TODOIST_API_KEY\s*=\s*[\"'][a-f0-9]{32}" --include="*.py" --include="*.yml" --include="*.yaml" --include="*.json" --exclude-dir=.git .; then
            echo "::error::Found hardcoded Todoist API key!"
            exit 1
          fi

      - name: Check for .env files
        run: |
          if find . -name ".env*" -not -name "*.example" -not -path "./.git/*" | grep -q .; then
            echo "::error::Found .env file(s) that should not be committed!"
            find . -name ".env*" -not -name "*.example" -not -path "./.git/*"
            exit 1
          fi