name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  labeler:
    name: Auto Label PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml

  size-check:
    name: Check PR Size
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let label = '';
            if (total < 50) label = 'size/XS';
            else if (total < 200) label = 'size/S';
            else if (total < 500) label = 'size/M';
            else if (total < 1000) label = 'size/L';
            else label = 'size/XL';
            
            // Add size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [label]
            });
            
            // Warn if PR is too large
            if (total > 1000) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '⚠️ This PR is quite large (>' + total + ' lines). Consider breaking it into smaller PRs for easier review.'
              });
            }

  test-requirements:
    name: Check Test Requirements
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            gtd_coach/**/*.py
            !gtd_coach/**/test_*.py
      
      - name: Check for tests
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ');
            const testFiles = changedFiles.filter(f => f.includes('test_'));
            
            if (testFiles.length === 0) {
              const sourceFiles = changedFiles.filter(f => !f.includes('test_'));
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `⚠️ **No tests found for changed source files:**\n\n${sourceFiles.map(f => `- ${f}`).join('\n')}\n\nPlease add tests or update existing ones.`
              });
              
              core.setFailed('Tests are required for source code changes');
            }

  documentation-check:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for documentation updates
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const hasCodeChanges = files.data.some(f => 
              f.filename.endsWith('.py') && !f.filename.includes('test_')
            );
            
            const hasDocChanges = files.data.some(f => 
              f.filename.endsWith('.md') || 
              f.filename.includes('docs/')
            );
            
            if (hasCodeChanges && !hasDocChanges) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '📝 **Reminder:** This PR contains code changes but no documentation updates. Please update relevant documentation if needed.'
              });
            }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0

  agent-test-summary:
    name: Agent Test Summary
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install pytest pytest-json-report
      
      - name: Run agent tests with JSON report
        run: |
          pytest tests/agent/ -v --json-report --json-report-file=agent-test-report.json || true
        continue-on-error: true
      
      - name: Generate test summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('agent-test-report.json', 'utf8'));
              
              const summary = `## 🤖 Agent Test Summary
              
              | Metric | Value |
              |--------|-------|
              | Total Tests | ${report.summary.total} |
              | Passed | ✅ ${report.summary.passed} |
              | Failed | ❌ ${report.summary.failed} |
              | Skipped | ⏭️ ${report.summary.skipped} |
              | Duration | ⏱️ ${report.duration.toFixed(2)}s |
              
              ### Test Categories
              - **LangGraph Tests**: ${report.tests.filter(t => t.nodeid.includes('langgraph')).length}
              - **User Journey Tests**: ${report.tests.filter(t => t.nodeid.includes('user_path')).length}
              - **Failure Scenario Tests**: ${report.tests.filter(t => t.nodeid.includes('failure')).length}
              - **Simulation Tests**: ${report.tests.filter(t => t.nodeid.includes('simulation')).length}
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            } catch (error) {
              console.log('Could not generate test summary:', error);
            }

  ready-to-merge:
    name: Ready to Merge Check
    needs: [size-check, test-requirements, dependency-review]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check merge readiness
        uses: actions/github-script@v7
        with:
          script: |
            const checks = [
              { name: 'size-check', status: '${{ needs.size-check.result }}' },
              { name: 'test-requirements', status: '${{ needs.test-requirements.result }}' },
              { name: 'dependency-review', status: '${{ needs.dependency-review.result }}' }
            ];
            
            const failed = checks.filter(c => c.status === 'failure');
            
            if (failed.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `❌ **PR is not ready to merge**\n\nFailed checks:\n${failed.map(c => `- ${c.name}`).join('\n')}`
              });
              core.setFailed('PR checks failed');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '✅ **PR checks passed!** This PR is ready for review.'
              });
            }