version: '3.8'

services:
  # Neo4j for integration tests (optional - tests should mock if not available)
  neo4j:
    image: neo4j:5-community
    environment:
      - NEO4J_AUTH=neo4j/testpassword
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "testpassword", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Main test runner
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - TEST_MODE=true
      - MOCK_EXTERNAL_APIS=true
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=testpassword
      - LM_STUDIO_URL=http://lm-studio-mock:1234
      - PYTHONPATH=/app
      - PYTEST_WORKERS=4
    volumes:
      - ./tests:/app/tests:ro
      - ./gtd_coach:/app/gtd_coach:ro
      - ./test-results:/app/test-results
    networks:
      - test-network
    depends_on:
      neo4j:
        condition: service_healthy
    command: >
      bash -c "
        echo 'ðŸš€ Starting test execution...' &&
        python -m pytest tests/ 
          -v 
          --tb=short 
          --junit-xml=/app/test-results/junit.xml 
          --json-report 
          --json-report-file=/app/test-results/report.json
          -n 4
          --cov=gtd_coach
          --cov-report=xml:/app/test-results/coverage.xml
          --cov-report=term
      "

  # LM Studio mock server (simple HTTP mock)
  lm-studio-mock:
    image: mockserver/mockserver:latest
    environment:
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/lm-studio-mock.json
    ports:
      - "1234:1080"
    networks:
      - test-network
    volumes:
      - ./test-config/lm-studio-mock.json:/config/lm-studio-mock.json:ro

networks:
  test-network:
    driver: bridge

volumes:
  test-results: